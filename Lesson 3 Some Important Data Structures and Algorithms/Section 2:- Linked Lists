# Linked Lists in Python

# What is a Linked List?
# A linked list is a data structure consisting of nodes. 
# Each node contains a value and a reference (or pointer) to the next node in the sequence.
# This structure allows for efficient addition and removal of elements without needing 
# to modify the indexes of other elements, unlike arrays.

# Analogy:
# Think of a mailman delivering letters. Each letter contains the address of its destination, 
# helping the mailman deliver them in sequence. Similarly, each node in a linked list contains 
# the location of the next node.

# Why Use Linked Lists?
# - Dynamic Size: Linked lists do not require a predefined size and can grow or shrink as needed.
# - Efficient Modifications: Adding or removing elements is quick because we only update 
#   pointers, without shifting elements like in arrays.

# Limitations:
# - No direct access to elements: You need to traverse the list to find a specific value.
# - Higher memory usage compared to arrays due to storing pointers.

# Implementing a Linked List in Python
# Python does not have built-in pointers, but we can simulate them using object references.

# Node Class: Represents each element in the linked list
class Node:
    def __init__(self, value):
        self.value = value  # The data/value stored in the node
        self.next = None    # Pointer to the next node, initially set to None

# LinkedList Class: Represents the linked list and its operations
class LinkedList:
    def __init__(self, head=None):
        self.head = head  # The head node of the linked list, initially None
    
    # Insert a new node at the beginning of the linked list
    def insert_at_beginning(self, value):
        new_node = Node(value)  # Create a new node with the given value
        new_node.next = self.head  # Link the new node to the current head
        self.head = new_node  # Update the head to the new node

    # Insert a new node at the end of the linked list
    def insert_at_end(self, value):
        new_node = Node(value)  # Create a new node with the given value
        if not self.head:  # If the list is empty, set the head to the new node
            self.head = new_node
            return
        current = self.head
        # Traverse to the last node
        while current.next:
            current = current.next
        current.next = new_node  # Link the last node to the new node

    # Insert a node at a specific index
    def insert_at_index(self, value, index):
        if index == 0:  # If the index is 0, insert at the beginning
            self.insert_at_beginning(value)
            return
        new_node = Node(value)
        current = self.head
        count = 0
        # Traverse to the node just before the target index
        while current and count < index - 1:
            current = current.next
            count += 1
        if current:  # If the index is valid
            new_node.next = current.next
            current.next = new_node
        else:  # If the index is out of bounds
            print("The index you have provided is out of bounds")

    # Display the linked list as a sequence of values
    def display(self):
        values = []
        current = self.head
        while current:  # Traverse the list and collect node values
            values.append(current.value)
            current = current.next
        print(" -> ".join(map(str, values)) + " -> None")  # Display values

    # Remove the first occurrence of a value
    def remove_first_occurrence(self, value):
        if not self.head:  # If the list is empty
            print("The List is empty. Nothing to remove.")
            return
        if self.head.value == value:  # If the value is in the head node
            self.head = self.head.next
            return
        current = self.head
        # Traverse to find the node just before the target value
        while current.next and current.next.value != value:
            current = current.next
        if current.next:  # If the value is found
            current.next = current.next.next
        else:
            print(f"Value {value} not found in the list")

    # Remove a node at a specific index
    def remove_at_index(self, index):
        if not self.head:  # If the list is empty
            print("The list is empty")
            return
        if index == 0:  # If the index is 0, remove the head node
            self.head = self.head.next
            return
        current = self.head
        count = 0
        # Traverse to the node just before the target index
        while current.next and count < index - 1:
            current = current.next
            count += 1
        if current.next:  # If the index is valid
            current.next = current.next.next
        else:
            print(f"Index {index} is out of bounds")

    # Search for a value in the linked list
    def search(self, value):
        current = self.head
        position = 0
        while current:  # Traverse the list
            if current.value == value:  # If the value is found
                return position
            current = current.next
            position += 1
        return -1  # Return -1 if the value is not found

    # Calculate the length of the linked list
    def length(self):
        count = 0
        current = self.head
        while current:  # Traverse the list and count nodes
            count += 1
            current = current.next
        return count

    # Reverse the linked list
    def reverse(self):
        prev = None
        current = self.head
        while current:  # Reverse the pointers of the nodes
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev  # Update the head to the new first node

# Sample Usage
ll = LinkedList()
ll.insert_at_end(10)
ll.insert_at_end(20)
ll.insert_at_end(30)
ll.insert_at_beginning(5)
ll.insert_at_index(15, 2)
ll.display()  # Output: 5 -> 10 -> 15 -> 20 -> 30 -> None
ll.remove_first_occurrence(20)
ll.display()  # Output: 5 -> 10 -> 15 -> 30 -> None
ll.remove_at_index(1)
ll.display()  # Output: 5 -> 15 -> 30 -> None
print("Search for 15:", ll.search(15))  # Output: 1
print("Length of list:", ll.length())  # Output: 3
ll.reverse()
ll.display()  # Output: 30 -> 15 -> 5 -> None
